// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

model user {
  id                    String              @id @default(cuid())
  email                 String              @unique @db.VarChar(100)
  pseudo                String              @unique @db.VarChar(30)
  profilePicture        String?             @db.VarChar(255)
  password              String              @db.VarChar(255)
  role                  RoleEnum            @default(USER)
  resetPasswordCode     String?             @db.VarChar(255)
  resetPasswordCodeDate Int?                @db.Int()
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user_setting          user_setting[]
  game_advice           game_advice[]
  post                  post[]
  post_comment          post_comment[]
  post_like             post_like[]
  staff_request         staff_request[]
  user_notification     user_notification[]
  favorite_game         favorite_game[]
}

model user_notification {
  id               String               @id @default(cuid())
  id_user          String
  user             user                 @relation(fields: [id_user], references: [id])
  notificationType NotificationTypeEnum
  destinationId    String               @db.VarChar(255)
  isRead           Boolean              @default(false)
  createdAt        DateTime             @default(now())
}

model setting {
  id           String         @id @default(cuid())
  name         String         @unique @db.VarChar(50)
  user_setting user_setting[]
}

model user_setting {
  id_user    String
  id_setting String
  user       user    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  setting    setting @relation(fields: [id_setting], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_user, id_setting])
}

model staff_request {
  id        String           @id @default(cuid())
  id_user   String
  user      user             @relation(fields: [id_user], references: [id])
  content   String           @db.Text()
  status    StaffRequestEnum @default(WAITING)
  createdAt DateTime         @default(now())
}

model game {
  id            String          @id @default(cuid())
  name          String          @unique @db.VarChar(50)
  logo          String          @db.VarChar(255)
  description   String          @db.Text()
  releaseDate   DateTime
  createdAt     DateTime        @default(now())
  media         media[]
  game_category game_category[]
  game_platform game_platform[]
  game_advice   game_advice[]
  favorite_game favorite_game[]
  news          news[]
}

model favorite_game {
  id_game String
  id_user String
  game    game   @relation(fields: [id_game], references: [id])
  user    user   @relation(fields: [id_user], references: [id])

  @@id([id_game, id_user])
}

model game_advice {
  id_game String
  id_user String
  advice  String @db.Text()
  note    Int
  game    game   @relation(fields: [id_game], references: [id])
  user    user   @relation(fields: [id_user], references: [id])

  @@id([id_game, id_user])
}

model game_category {
  id_game     String
  id_category String
  game        game     @relation(fields: [id_game], references: [id])
  category    category @relation(fields: [id_category], references: [id])

  @@id([id_game, id_category])
}

model news {
  id        String         @id @default(cuid())
  id_game   String
  game      game           @relation(fields: [id_game], references: [id])
  title     String         @db.VarChar(255)
  logo      String         @db.VarChar(255)
  content   String         @db.Text()
  createdAt DateTime       @default(now())
  status    NewsStatusEnum @default(WAITING)
}

model category {
  id            String          @id @default(cuid())
  name          String          @unique @db.VarChar(50)
  image         String          @db.VarChar(255)
  game_category game_category[]
}

model game_platform {
  id_game     String
  id_platform String
  game        game     @relation(fields: [id_game], references: [id])
  platform    platform @relation(fields: [id_platform], references: [id])

  @@id([id_game, id_platform])
}

model platform {
  id            String          @id @default(cuid())
  name          String          @unique @db.VarChar(50)
  image         String          @db.VarChar(255)
  game_platform game_platform[]
}

model media {
  id      String    @id @default(cuid())
  id_game String
  type    MediaEnum @default(IMAGE)
  path    String    @db.VarChar(255)
  game    game      @relation(fields: [id_game], references: [id])
}

model post {
  id           String         @id @default(cuid())
  content      String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  photo        String?        @db.VarChar(255)
  user         user           @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user      String
  post_comment post_comment[]
  post_like    post_like[]
}

model post_comment {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  post      post     @relation(fields: [id_post], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_post   String
  user      user     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user   String
}

model post_like {
  id_post String
  id_user String
  post    post   @relation(fields: [id_post], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    user   @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_post, id_user])
}

enum RoleEnum {
  ADMIN
  MODERATOR
  CERTIFIED
  USER
}

enum NotificationTypeEnum {
  NEW_COMMENT
  NEW_LIKE
}

enum StaffRequestEnum {
  WAITING
  ACCEPTED
  REFUSED
}

enum NewsStatusEnum {
  WAITING
  ACCEPTED
  REFUSED
}

enum MediaEnum {
  IMAGE
  VIDEO
}
